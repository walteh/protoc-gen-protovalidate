package protocgenprotovalidate

import (
	"context"
	"errors"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/bmatcuk/doublestar/v4"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

// for each filed, add the header
var header = `
// Code generated by protoc-gen-protovalidate. DO NOT EDIT.

// ================= protoc-gen-protovalidate =================
// This code is a copy of the %[1]s file in the bufbuild/protovalidate-go repository.
// The only modification is to the import path to use a local path.
//
// Release Tag: %[2]s
// Source: https://raw.githubusercontent.com/bufbuild/protovalidate-go/refs/tags/%[2]s/%[1]s
// ================= protoc-gen-protovalidate =================

`

func GenerateGo(ctx context.Context, files map[string]string, opts *descriptorpb.FileOptions, desc protoreflect.FileDescriptor, jsn map[string]any) (map[string]string, error) {

	var replacements = map[string]string{
		"github.com/bufbuild/protovalidate-go":                                    opts.GetGoPackage() + "/protovalidate",
		"buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate": opts.GetGoPackage(),
		"buf/validate/validate.proto":                                             desc.Path(),
	}

	filed := map[string]string{}

	rootPath := strings.TrimSuffix(desc.Path(), "validate.proto")

	for filePath, fileContent := range files {

		if strings.HasSuffix(filePath, "_test.go") {
			continue
		}

		glob := "{*,resolve/*,cel/*}.go"

		matches, err := doublestar.PathMatch(glob, filePath)
		if err != nil {
			return nil, err
		}

		if !matches {
			continue
		}

		content := string(fileContent)

		for old, new := range replacements {
			content = strings.ReplaceAll(content, old, new)
		}

		content = fmt.Sprintf(header, filePath, jsn["tag_name"]) + content

		filed[filepath.Join(rootPath, "protovalidate", filePath)] = content
	}

	if len(filed) == 0 {
		return nil, errors.New("no files to process")
	}

	return filed, nil
}
